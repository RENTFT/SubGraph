# The set of all the Lending entities is the set of all of the"
# NFTs being lent out on the Rent NFT platform"
type Lending @entity {
  id: ID!
  # Counter of the transaction. Use this for pagination, filtering
  # and sorting.
  cursor: Int!

  nftAddress: Bytes!
  tokenID: BigInt!

  lenderAddress: Bytes!
  maxRentDuration: BigInt!
  dailyRentPrice: Bytes!
  paymentToken: BigInt!
  lendAmount: BigInt!
  availableAmount: BigInt!
  is721: Boolean!
  lentAt: BigInt!

  willAutoRenew: Boolean!

  renting: [Renting!] @derivedFrom(field: "lending")
  user: User!

  rentClaimed: Boolean!

  # this shouldn't exist because ideally we remove the lendings when
  # lending is stopped. However, if willAutoRenew is false
  # when renting is claimed, StopLend is emitted before RentClaimed
  # which causes indexing error since handleRentClaimed cannot retrieve
  # deleted lending. Therefore, purpose of this flag is purely to distinguish
  # between active and expired lendings
  expired: Boolean!
}

type Renting @entity {
  id: ID!
  # Counter of the transaction. Use this for pagination, filtering
  # and sorting.
  cursor: Int!

  renterAddress: Bytes!
  rentAmount: BigInt!
  rentDuration: BigInt!
  rentedAt: BigInt!
  expired: Boolean!

  lending: Lending!
  user: User!
}

type User @entity {
  "id here is user's Ethereum address"
  id: ID!
  # Counter of the transaction. Use this for pagination, filtering
  # and sorting.cursor: Int!
  cursor: Int!
  lending: [Lending!] @derivedFrom(field: "user")
  renting: [Renting!] @derivedFrom(field: "user")
}

# How many lendings, rentings, users there were in total
# These are used as cursors to paginate through the result
# set. They are all Ints which makes ordering natural,
# unlike BigInt which is a string (alhpanumeric ordering)
type Counter @entity {
  id: ID!
  lending: Int!
  renting: Int!
  user: Int!
}
